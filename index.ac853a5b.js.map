{"mappings":"ACCA,+DAA+D;AAC/D,MAAM,EAAwB,AAAC,IAC3B,IAAM,EAAW,SAAS,gBAAgB,CAAC,uBAErC,EAAW,IAAI,qBAAqB,CAAC,EAAS,KAChD,EAAQ,OAAO,CAAC,AAAC,IACb,GAAI,EAAM,cAAc,CAAE,CACtB,IAAM,EAAe,SAAS,EAAM,MAAM,CAAC,aAAa,CAAC,OAAO,YAAY,CAAC,gBACvE,EAAQ,EAAM,MAAM,CAAC,aAAa,CAAC,OAAO,YAAY,CAAC,SACvD,EAAQ,EAAM,MAAM,CAAC,aAAa,CAAC,OAAO,YAAY,CAAC,SAE7D,WAAW,KAAO,EAAQ,EAAM,MAAM,CAAE,EAAa,EAAM,EAAM,EAAE,GAEnE,EAAS,SAAS,CAAC,EAAM,MAAM,CACnC,CACJ,EACJ,GAEA,EAAS,OAAO,CAAC,AAAC,IACd,EAAS,OAAO,CAAC,EACrB,EACJ,EAEM,EAAU,CAAC,EAAS,EAAc,EAAO,KAGvC,IAAM,EAAc,KAAK,KAAK,CAAC,AAFd,IACK,CAAA,IAAO,EAA7B,GAEM,EAAc,AAAA,GAAK,EAAK,CAAA,EAAI,CAAA,EAC9B,EAAQ,EAEN,EAAO,AAAC,IACV,IACA,IAAM,EAAW,EAAQ,EACnB,EAAe,KAAK,KAAK,CAAC,EAAY,GAAY,EACpD,AAAS,CAAA,QAAT,EACA,EAAQ,aAAa,CAAC,OAAO,WAAW,CAAG,EAAQ,EAGnD,EAAQ,aAAa,CAAC,OAAO,WAAW,CAAG,EAAe,EAI1D,EAAQ,GACR,sBAAsB,EAE9B,EAEA,sBAAsB,EAM9B,EAEA,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,EAAsB,IAE1B,E,4D","sources":["<anon>","count-up-animation.js"],"sourcesContent":["// Function to start counting animation when element is in view\nconst startCountingOnScroll = (delay)=>{\n    const elements = document.querySelectorAll(\".counting-container\");\n    const observer = new IntersectionObserver((entries, observer)=>{\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting) {\n                const targetNumber = parseInt(entry.target.querySelector(\"div\").getAttribute(\"data-target\"));\n                const units = entry.target.querySelector(\"div\").getAttribute(\"units\");\n                const where = entry.target.querySelector(\"div\").getAttribute(\"where\");\n                setTimeout(()=>{\n                    countUp(entry.target, targetNumber, units, where);\n                }, delay);\n                observer.unobserve(entry.target);\n            }\n        });\n    });\n    elements.forEach((element)=>{\n        observer.observe(element);\n    });\n};\n// Function to animate the counting\nconst countUp = (element, targetNumber, units, where)=>{\n    const duration = 3000;\n    const frameDuration = 1000 / 60;\n    const totalFrames = Math.round(duration / frameDuration);\n    const easeOutQuad = (t)=>t * (2 - t);\n    let frame = 0;\n    const step = (timestamp)=>{\n        frame++;\n        const progress = frame / totalFrames;\n        const currentCount = Math.round(easeOutQuad(progress) * targetNumber);\n        if (where == \"left\") element.querySelector(\"div\").textContent = units + currentCount;\n        else element.querySelector(\"div\").textContent = currentCount + units;\n        if (frame < totalFrames) requestAnimationFrame(step);\n    };\n    requestAnimationFrame(step);\n};\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    startCountingOnScroll(800);\n});\n\n//# sourceMappingURL=index.ac853a5b.js.map\n","\r\n// Function to start counting animation when element is in view\r\nconst startCountingOnScroll = (delay) => {\r\n    const elements = document.querySelectorAll('.counting-container');\r\n\r\n    const observer = new IntersectionObserver((entries, observer) => {\r\n        entries.forEach((entry) => {\r\n            if (entry.isIntersecting) {\r\n                const targetNumber = parseInt(entry.target.querySelector('div').getAttribute('data-target'));\r\n                const units = entry.target.querySelector('div').getAttribute('units');\r\n                const where = entry.target.querySelector('div').getAttribute('where');\r\n                \r\n                setTimeout(() => {countUp(entry.target, targetNumber,units,where)},delay)\r\n                ;\r\n                observer.unobserve(entry.target);\r\n            }\r\n        });\r\n    });\r\n\r\n    elements.forEach((element) => {\r\n        observer.observe(element);\r\n    });\r\n};\r\n// Function to animate the counting\r\nconst countUp = (element, targetNumber, units, where) => {\r\n        const duration = 3000\r\n        const frameDuration = 1000 / 60;\r\n        const totalFrames = Math.round(duration / frameDuration);\r\n        const easeOutQuad = t => t * (2 - t);\r\n        let frame = 0;\r\n    \r\n        const step = (timestamp) => {\r\n            frame++;\r\n            const progress = frame / totalFrames;\r\n            const currentCount = Math.round(easeOutQuad(progress) * targetNumber);\r\n            if (where == \"left\") {\r\n                element.querySelector('div').textContent = units + currentCount ;\r\n            }\r\n            else {\r\n                element.querySelector('div').textContent = currentCount + units;\r\n\r\n            }\r\n    \r\n            if (frame < totalFrames) {\r\n                requestAnimationFrame(step);\r\n            }\r\n        };\r\n    \r\n        requestAnimationFrame(step);\r\n\r\n    \r\n   \r\n       \r\n    \r\n};\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    startCountingOnScroll(800);\r\n    \r\n});\r\n"],"names":["startCountingOnScroll","delay","elements","document","querySelectorAll","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","targetNumber","parseInt","target","querySelector","getAttribute","units","where","setTimeout","countUp","unobserve","element","observe","totalFrames","Math","round","duration","easeOutQuad","t","frame","step","timestamp","progress","currentCount","textContent","requestAnimationFrame","addEventListener"],"version":3,"file":"index.ac853a5b.js.map"}